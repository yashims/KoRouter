plugins {
    id 'com.android.library'
    id 'kotlin-multiplatform'
}

group "me.yashims85"
version "0.0.1"

ext {
    library_build = 1
    library_name = group + ".util"
}

android {
    compileSdkVersion 28
    archivesBaseName = library_name

    defaultConfig {
        minSdkVersion 19
    }

    sourceSets {
        main {
            def root = "src/androidMain"
            setRoot(root)
            java.srcDirs += "${root}/kotlin"
        }
    }
}

dependencies {
    // Specify Kotlin/JVM stdlib dependency.
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk7'

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.jetbrains.kotlin:kotlin-test'
    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit'

    androidTestImplementation 'junit:junit:4.12'
    androidTestImplementation 'org.jetbrains.kotlin:kotlin-test'
    androidTestImplementation 'org.jetbrains.kotlin:kotlin-test-junit'

    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}

kotlin {
    targets {
//        // TODO: iOSやるときまでお休み
//        final def iOSTarget = System.getenv('SDK_NAME')?.startsWith("iphoneos") ? presets.iosArm64 : presets.iosX64
//
//        fromPreset(iOSTarget, 'iOS') {
//            compilations.main.outputKinds('FRAMEWORK')
//            // TODO: iOS Bitcodeを有効にする -> Kotlin v1.3.20 で自動でONになってるはず
//            compilations.main.extraOpts '-Xembed-bitcode' or '-Xembed-bitcode-marker'
//        }

//        // com.android.libraryをimportしてないとpresets.android出現しない
//        fromPreset(presets.jvm, 'android')
        fromPreset(presets.android, 'android')
    }

    sourceSets {

        /**
         * @note 依存は以下を参照
         * @see https://github.com/pljp/kotlinx.coroutines/blob/japanese_translation/README.md#gradle
         */
        commonMain {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlin_version"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$coroutines_version"
            }
        }

        androidMain {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"
            }
        }

//        iOSMain {
//            dependencies {
//                implementation "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlin_version"
//                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-native:$coroutines_version"
//            }
//        }

        commonTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test-common'
                implementation 'org.jetbrains.kotlin:kotlin-test-annotations-common'
            }
        }

    }
}

// workaround for https://youtrack.jetbrains.com/issue/KT-27170
configurations {
    compileClasspath
}

//// TODO: iOSやるときまでお休み
// SEE: https://github.com/JetBrains/kotlin-mpp-example/blob/master/greeting/build.gradle
//task packForXCode(type: Sync) {
//    final File frameworkDir = new File(buildDir, "xcode-frameworks")
//    final String mode = project.findProperty("XCODE_CONFIGRATION")?.toUpperCase() ?: 'DEBUG'
//
//    inputs.property "mode", mode
//    dependsOn kotlin.targets.iOS.compilations.main.linkTaskName("FRAMEWORK", mode)
//
//    from { kotlin.targets.iOS.compilations.main.getBinary("FRAMEWORK", mode).parentFile }
//    into frameworkDir
//
//    doLast {
//        new File(frameworkDir, 'gradlew').with {
//            text = "#!/bin/bash\nexport 'JAVA_HOME=${System.getProperty("java.home")}'\ncd '${rootProject.rootDir}'\n./gradlew \$@\n"
//            setExecutable(true)
//        }
//    }
//}
//
//tasks.build.dependsOn packForXCode
