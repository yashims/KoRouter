plugins {
    id 'com.android.library'
    id 'kotlin-multiplatform'
    id 'com.jfrog.bintray'
}

group "me.yashims"
version "0.0.1"
archivesBaseName = 'korouter'


ext {
    library_build = 1
    library_name = group + ".korouter"
}

android {
    compileSdkVersion 28
    archivesBaseName = library_name

    defaultConfig {
        minSdkVersion 19
    }

    sourceSets {
        main {
            def root = "src/androidMain"
            setRoot(root)
            java.srcDirs += "${root}/kotlin"
        }
    }
}

dependencies {
//    implementation project(':util')
    // Specify Kotlin/JVM stdlib dependency.
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk7'

    testImplementation 'junit:junit:4.12'
    testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_version"

    androidTestImplementation 'junit:junit:4.12'
    androidTestImplementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    androidTestImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"

    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}

kotlin {
//    targets {
//        fromPreset(presets.iosX64, 'ios') {
//            compilations.main.outputKinds('FRAMEWORK')
//        }

        // com.android.libraryをimportしてないとpresets.android出現しない
//        fromPreset(presets.android, 'android')
//        fromPreset(presets.jvm, 'jvm')
//    }

    android()
    android {
        // releaseとdebugのaarを作る
        publishLibraryVariants("release", "debug")
    }

    iosArm64('ios') {
        binaries {
            framework()
        }
    }

    iosX64() {
        binaries {
            framework()
        }
    }


    sourceSets {

        /**
         * @note 依存は以下を参照
         * @see https://github.com/pljp/kotlinx.coroutines/blob/japanese_translation/README.md#gradle
         */
        commonMain {
            dependencies {
//                implementation project(':util')
                implementation "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlin_version"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$coroutines_version"
            }
        }

        androidMain {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"
            }
        }

//        jvmMain {
//            dependencies {
//                implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
//                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
//            }
//        }

        iosMain {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlin_version"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-native:$coroutines_version"
            }
        }

        iosX64Main.dependsOn(iosMain)

        commonTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test-common'
                implementation 'org.jetbrains.kotlin:kotlin-test-annotations-common'
            }
        }
//        jvmTest {
//            dependencies {
//                implementation 'junit:junit:4.12'
//                implementation 'org.jetbrains.kotlin:kotlin-test-common'
//                implementation 'org.jetbrains.kotlin:kotlin-test-annotations-common'
////                implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.3.0-M1'
////                implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test'
//                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_version"
//            }
//        }
    }
}

// workaround for https://youtrack.jetbrains.com/issue/KT-27170
configurations {
    compileClasspath
}

// This task attaches native framework built from ios module to Xcode project
// (see iosApp directory). Don't run this task directly,
// Xcode runs this task itself during its build process.
// Before opening the project from iosApp directory in Xcode,
// make sure all Gradle infrastructure exists (gradle.wrapper, gradlew).
task copyFramework {
    def buildType = project.findProperty('kotlin.build.type') ?: 'DEBUG'
    def target = project.findProperty('kotlin.target') ?: 'ios'
    dependsOn kotlin.targets."$target".binaries.getFramework(buildType).linkTask

    doLast {
        def srcFile = kotlin.targets."$target".binaries.getFramework(buildType).outputFile
        def targetDir = getProperty('configuration.build.dir')
        copy {
            from srcFile.parent
            into targetDir
            include 'korouter.framework/**'
            include 'korouter.framework.dSYM'
        }
    }
}

/**
 * Jcenter deployment
 */
def libraryId = 'korouter'
def siteUrl = 'https://github.com/yashims/kotlin-router'
def githubUrl = 'https://github.com/yashims/kotlin-router'
bintray {

    user = project.hasProperty('bintray_user') ? bintray_user : ''
    key = project.hasProperty('bintray_key') ? bintray_key : ''
    configurations = ['archives']

    pkg {
        repo = 'maven'
        name = libraryId
        licenses = ['MIT']
        websiteUrl = siteUrl
        issueTrackerUrl = githubUrl + '/blob/master/LICENSE'
        vcsUrl = githubUrl + '.git'
        issueTrackerUrl = githubUrl + '/issues'
        publicDownloadNumbers = true
        version {
            name = project.version
        }
    }
}

